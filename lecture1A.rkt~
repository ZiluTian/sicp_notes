#lang racket

; Lecture 1A. Overview and Introduction to Lisp

; To find an approximation to \sqrt(x) 
; Make a guess G
; Improve the guess by averaging G and x/G
; Keep improving the guess until it is good enough

(define average
  (lambda (x y) (* .5 (+ x y))))

(define square
  (lambda (x) (* x x)))

(define square-root
  (lambda (x)
    (define improve
      (lambda (guess x)
        (average guess (/ x guess))))
    (define good-enough?
      (lambda (f guess value)
        (let ([precision 0.001])
          (if (< (abs (- (f guess) value)) precision)
              true
              false))))
    (define try
      (lambda (guess)
        (if (good-enough? square guess x)
            guess
            (try (improve guess x)))))
    (try 1)))
    
(square-root 9)


